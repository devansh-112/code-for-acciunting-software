/**
 * @fileoverview Firestore Security Rules for a user-centric accounting application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, ensuring that only the authenticated user can access their own data.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, with subcollections for invoices, expenses, and reports. This path-based structure simplifies security rules and ensures data isolation.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent unauthorized enumeration of user accounts.
 * - All write operations are validated to ensure the authenticated user owns the data being modified.
 * - Data consistency between the path and document data is enforced on create and update operations.
 * - Read-only collections or public data are not supported in this data model.
 *
 * Denormalization for Authorization:
 * The data model uses path-based ownership (e.g., /users/{userId}/invoices/{invoiceId}) to avoid the need for complex `get()` calls in security rules. The `userId` is implicitly associated with all documents in these subcollections, enabling simple authorization checks based on `request.auth.uid`.
 * This ensures Authorization Independence. Each collection is namespaced under the user's ID, removing the need for complex `get()` calls in security rules, which could hinder atomic operations. All list operations are secure via path-based ownership, thus satisfying the QAPs.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Prevents listing all users.
     * @path /users
     * @allow (get) Authenticated user can retrieve their own user document.
     * @deny (list) No one can list all users.
     * @principle Prevents unauthorized enumeration of user accounts.
     */
    match /users {
      allow get: if false;
      allow list: if false;
    }

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own user document.
     * @allow (get) Authenticated user can retrieve their own user document.
     * @allow (update) Authenticated user can update their own user document.
     * @allow (delete) Authenticated user can delete their own user document.
     * @deny (create) Authenticated user cannot create a user document with a mismatched user ID.
     * @deny (get) Authenticated user cannot retrieve another user's document.
     * @deny (update) Authenticated user cannot update another user's document.
     * @deny (delete) Authenticated user cannot delete another user's document.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Controls access to user's invoices.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow (create) Authenticated user can create an invoice under their user ID.
     * @allow (get) Authenticated user can retrieve an invoice under their user ID.
     * @allow (update) Authenticated user can update an invoice under their user ID.
     * @allow (delete) Authenticated user can delete an invoice under their user ID.
     * @deny (create) Authenticated user cannot create an invoice under another user's ID.
     * @deny (get) Authenticated user cannot retrieve an invoice under another user's ID.
     * @deny (update) Authenticated user cannot update an invoice under another user's ID.
     * @deny (delete) Authenticated user cannot delete an invoice under another user's ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/invoices/{invoiceId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to user's expenses.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) Authenticated user can create an expense under their user ID.
     * @allow (get) Authenticated user can retrieve an expense under their user ID.
     * @allow (update) Authenticated user can update an expense under their user ID.
     * @allow (delete) Authenticated user can delete an expense under their user ID.
     * @deny (create) Authenticated user cannot create an expense under another user's ID.
     * @deny (get) Authenticated user cannot retrieve an expense under another user's ID.
     * @deny (update) Authenticated user cannot update an expense under another user's ID.
     * @deny (delete) Authenticated user cannot delete an expense under another user's ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/expenses/{expenseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to user's reports.
     * @path /users/{userId}/reports/{reportId}
     * @allow (create) Authenticated user can create a report under their user ID.
     * @allow (get) Authenticated user can retrieve a report under their user ID.
     * @allow (update) Authenticated user can update a report under their user ID.
     * @allow (delete) Authenticated user can delete a report under their user ID.
     * @deny (create) Authenticated user cannot create a report under another user's ID.
     * @deny (get) Authenticated user cannot retrieve a report under another user's ID.
     * @deny (update) Authenticated user cannot update a report under another user's ID.
     * @deny (delete) Authenticated user cannot delete a report under another user's ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/reports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to user's inventory items.
     * @path /users/{userId}/inventory/{inventoryId}
     * @allow (create) Authenticated user can create an inventory item under their user ID.
     * @allow (get) Authenticated user can retrieve an inventory item under their user ID.
     * @allow (update) Authenticated user can update an inventory item under their user ID.
     * @allow (delete) Authenticated user can delete an inventory item under their user ID.
     * @deny (create) Authenticated user cannot create an inventory item under another user's ID.
     * @deny (get) Authenticated user cannot retrieve an inventory item under another user's ID.
     * @deny (update) Authenticated user cannot update an inventory item under another user's ID.
     * @deny (delete) Authenticated user cannot delete an inventory item under another user's ID.
     */
        match /users/{userId}/inventory/{inventoryId} {
          function isSignedIn() {
            return request.auth != null;
          }

          function isOwner(userId) {
            return request.auth.uid == userId;
          }

           function isExistingOwner(userId) {
              return isOwner(userId) && resource != null;
          }

          allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
          allow get: if isSignedIn() && isOwner(userId);
          allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
          allow delete: if isExistingOwner(userId);
          allow list: if isSignedIn() && isOwner(userId);
        }
  }
}