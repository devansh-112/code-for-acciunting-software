/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a strict user-ownership model.  Each user can only access data directly associated with their user ID.
 * @data_structure All data is nested under /users/{userId}, ensuring a clear ownership hierarchy. Invoices, expenses, reports, and inventory items are all stored as subcollections under each user's document.
 * @key_security_decisions User listing is disallowed. Write access to all collections is restricted to the owning user. Data consistency between paths and document IDs is enforced on creation and immutability is enforced on updates.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure the root user document, allowing only the user themselves to read and write their profile.
     * @path /users/{userId}
     * @allow (create) - Authenticated user 'user_abc' can create their profile at /users/user_abc if the document ID matches their UID.
     * @allow (get, update, delete) - Authenticated user 'user_abc' can read/update/delete their profile at /users/user_abc.
     * @deny (create) - Authenticated user 'user_xyz' cannot create a profile at /users/user_abc.
     * @deny (get, update, delete) - Authenticated user 'user_xyz' cannot read/update/delete the profile at /users/user_abc.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure the invoice subcollection, allowing only the owning user to manage their invoices.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow (create, get, list, update, delete) - Authenticated user 'user_abc' can manage their invoices under /users/user_abc/invoices/.
     * @deny (create, get, list, update, delete) - Authenticated user 'user_xyz' cannot manage invoices under /users/user_abc/invoices/.
     * @principle Enforces document ownership for all operations within a user's data tree.
     */
    match /users/{userId}/invoices/{invoiceId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure the expense subcollection, allowing only the owning user to manage their expenses.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create, get, list, update, delete) - Authenticated user 'user_abc' can manage their expenses under /users/user_abc/expenses/.
     * @deny (create, get, list, update, delete) - Authenticated user 'user_xyz' cannot manage expenses under /users/user_abc/expenses/.
     * @principle Enforces document ownership for all operations within a user's data tree.
     */
    match /users/{userId}/expenses/{expenseId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure the report subcollection, allowing only the owning user to manage their reports.
     * @path /users/{userId}/reports/{reportId}
     * @allow (create, get, list, update, delete) - Authenticated user 'user_abc' can manage their reports under /users/user_abc/reports/.
     * @deny (create, get, list, update, delete) - Authenticated user 'user_xyz' cannot manage reports under /users/user_abc/reports/.
     * @principle Enforces document ownership for all operations within a user's data tree.
     */
    match /users/{userId}/reports/{reportId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure the inventory subcollection, allowing only the owning user to manage their inventory.
     * @path /users/{userId}/inventory/{inventoryId}
     * @allow (create, get, list, update, delete) - Authenticated user 'user_abc' can manage their inventory under /users/user_abc/inventory/.
     * @deny (create, get, list, update, delete) - Authenticated user 'user_xyz' cannot manage inventory under /users/user_abc/inventory/.
     * @principle Enforces document ownership for all operations within a user's data tree.
     */
    match /users/{userId}/inventory/{inventoryId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}