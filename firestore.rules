/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user can only access
 * data under their own user ID. This approach prioritizes security and data isolation.
 *
 * Data Structure:
 * The Firestore database is structured with user-specific data nested under the `/users/{userId}` path.
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/invoices/{invoiceId}: Stores invoices issued by the user.
 * - /users/{userId}/expenses/{expenseId}: Stores expenses incurred by the user.
 * - /users/{userId}/reports/{reportId}: Stores financial reports generated for the user.
 * - /users/{userId}/inventory/{inventoryId}: Stores inventory items for the user.
 *
 * Key Security Decisions:
 * - User data is strictly segregated by user ID.
 * - List operations are restricted to the owner of the data.
 * - The rules explicitly deny any ambiguous or unhandled access patterns.
 *
 * Denormalization for Authorization:
 * To simplify rules and improve performance, the `userId` is included within each document (invoice, expense, report).
 * This allows for quick ownership checks without additional `get()` operations. The rules also validate
 * that this `userId` matches the `userId` in the path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user_abc' can create their profile if authenticated as 'user_abc'.
     * @allow (get, update, delete) - User with ID 'user_abc' can get, update, or delete their profile if authenticated as 'user_abc'.
     * @deny (create) - User with ID 'user_xyz' cannot create a profile for 'user_abc'.
     * @deny (get, update, delete) - User with ID 'user_xyz' cannot get, update, or delete the profile of 'user_abc'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure invoices for a specific user. Only the user can read/write their own invoices.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow (create) - User with ID 'user_abc' can create an invoice under /users/user_abc/invoices if authenticated as 'user_abc'.
     * @allow (get, list, update, delete) - User with ID 'user_abc' can get, list, update, or delete invoices under /users/user_abc/invoices if authenticated as 'user_abc'.
     * @deny (create) - User with ID 'user_xyz' cannot create an invoice under /users/user_abc/invoices.
     * @deny (get, list, update, delete) - User with ID 'user_xyz' cannot get, list, update, or delete invoices under /users/user_abc/invoices.
     * @principle Enforces document ownership and path-based access control.
     */
    match /users/{userId}/invoices/{invoiceId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure expenses for a specific user. Only the user can read/write their own expenses.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) - User with ID 'user_abc' can create an expense under /users/user_abc/expenses if authenticated as 'user_abc'.
     * @allow (get, list, update, delete) - User with ID 'user_abc' can get, list, update, or delete expenses under /users/user_abc/expenses if authenticated as 'user_abc'.
     * @deny (create) - User with ID 'user_xyz' cannot create an expense under /users/user_abc/expenses.
     * @deny (get, list, update, delete) - User with ID 'user_xyz' cannot get, list, update, or delete expenses under /users/user_abc/expenses.
     * @principle Enforces document ownership and path-based access control.
     */
    match /users/{userId}/expenses/{expenseId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure reports for a specific user. Only the user can read/write their own reports.
     * @path /users/{userId}/reports/{reportId}
     * @allow (create) - User with ID 'user_abc' can create a report under /users/user_abc/reports if authenticated as 'user_abc'.
     * @allow (get, list, update, delete) - User with ID 'user_abc' can get, list, update, or delete reports under /users/user_abc/reports if authenticated as 'user_abc'.
     * @deny (create) - User with ID 'user_xyz' cannot create a report under /users/user_abc/reports.
     * @deny (get, list, update, delete) - User with ID 'user_xyz' cannot get, list, update, or delete reports under /users/user_abc/reports.
     * @principle Enforces document ownership and path-based access control.
     */
    match /users/{userId}/reports/{reportId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure inventory items for a specific user. Only the user can read/write their own inventory items.
     * @path /users/{userId}/inventory/{inventoryId}
     * @allow (create) - User with ID 'user_abc' can create an inventory item under /users/user_abc/inventory if authenticated as 'user_abc'.
     * @allow (get, list, update, delete) - User with ID 'user_abc' can get, list, update, or delete inventory items under /users/user_abc/inventory if authenticated as 'user_abc'.
     * @deny (create) - User with ID 'user_xyz' cannot create an inventory item under /users/user_abc/inventory.
     * @deny (get, list, update, delete) - User with ID 'user_xyz' cannot get, list, update, or delete inventory items under /users/user_abc/inventory.
     * @principle Enforces document ownership and path-based access control.
     */
    match /users/{userId}/inventory/{inventoryId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}