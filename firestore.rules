/**
 * @fileoverview Firestore Security Rules for the accounting application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model where each user can only
 * access data explicitly associated with their user ID. This is achieved through
 * path-based rules that directly incorporate the user ID.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/invoices/{invoiceId}: Stores invoices owned by the user.
 * - /users/{userId}/expenses/{expenseId}: Stores expenses owned by the user.
 * - /users/{userId}/reports/{reportId}: Stores reports owned by the user.
 *
 * Key Security Decisions:
 * - User listing is implicitly disallowed by not granting list access to the /users collection.
 * - All data is namespaced under the user ID, simplifying ownership checks.
 * - Schema validation is relaxed in this prototyping phase, focusing on authorization.
 * - Every `match` block explicitly defines `allow` and `deny` for all CRUD operations.
 *
 * Denormalization for Authorization:
 * The `userId` is present in all subcollection documents (invoices, expenses, reports) and is validated against the path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with matching {userId} can create their profile.
     * @allow (get) User with matching {userId} can read their profile.
     * @allow (update) User with matching {userId} can update their profile.
     * @allow (delete) User with matching {userId} can delete their profile.
     * @deny (create) User attempts to create a profile with a mismatched {userId}.
     * @deny (get) Another user attempts to read this user's profile.
     * @deny (update) Another user attempts to update this user's profile.
     * @deny (delete) Another user attempts to delete this user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isExistingOwner(userId);

    }

    /**
     * @description Controls access to invoices issued by a user.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow (create) User with matching {userId} can create an invoice.
     * @allow (get) User with matching {userId} can read their invoice.
     * @allow (list) User with matching {userId} can list their invoices.
     * @allow (update) User with matching {userId} can update their invoice.
     * @allow (delete) User with matching {userId} can delete their invoice.
     * @deny (create) User attempts to create an invoice with a mismatched {userId}.
     * @deny (get) Another user attempts to read this user's invoice.
     * @deny (list) Another user attempts to list this user's invoices.
     * @deny (update) Another user attempts to update this user's invoice.
     * @deny (delete) Another user attempts to delete this user's invoice.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/invoices/{invoiceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to expenses incurred by a user.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) User with matching {userId} can create an expense.
     * @allow (get) User with matching {userId} can read their expense.
     * @allow (list) User with matching {userId} can list their expenses.
     * @allow (update) User with matching {userId} can update their expense.
     * @allow (delete) User with matching {userId} can delete their expense.
     * @deny (create) User attempts to create an expense with a mismatched {userId}.
     * @deny (get) Another user attempts to read this user's expense.
     * @deny (list) Another user attempts to list this user's expenses.
     * @deny (update) Another user attempts to update this user's expense.
     * @deny (delete) Another user attempts to delete this user's expense.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/expenses/{expenseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to reports generated for a user.
     * @path /users/{userId}/reports/{reportId}
     * @allow (create) User with matching {userId} can create a report.
     * @allow (get) User with matching {userId} can read their report.
     * @allow (list) User with matching {userId} can list their reports.
     * @allow (update) User with matching {userId} can update their report.
     * @allow (delete) User with matching {userId} can delete their report.
     * @deny (create) User attempts to create a report with a mismatched {userId}.
     * @deny (get) Another user attempts to read this user's report.
     * @deny (list) Another user attempts to list this user's reports.
     * @deny (update) Another user attempts to update this user's report.
     * @deny (delete) Another user attempts to delete this user's report.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/reports/{reportId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}