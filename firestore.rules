/**
 * @fileoverview Firestore Security Rules for the accounting application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model where each user can only
 * access data explicitly associated with their user ID. This is achieved through
 * path-based authorization, ensuring that all data is namespaced under the
 * /users/{userId} collection.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, including invoices, expenses, and
 * reports. This structure simplifies the rules and improves performance by
 * avoiding complex queries or 'get()' calls.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied.
 * - Write operations always validate user ownership based on the document path.
 * - Data schema validation is relaxed in the Prototyping Mode to enable rapid iteration.
 *
 * Denormalization for Authorization:
 * The 'userId' is embedded within each document (Invoice, Expense, Report, etc.)
 * to allow simple 'isOwner()' checks. This ensures that authorization checks
 * are efficient and do not require additional reads. The userId field is also validated to match the userId path to prevent spoofing.
 *
 * Structural Segregation:
 * All user-specific data is stored under the /users/{userId} collection,
 * ensuring a clear separation of data and simplified security management.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Prevents unauthenticated access.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces document ownership.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner and the resource exists.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces document ownership and existence for updates and deletes.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId));
    }

    /**
     * @description Rule for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) - An authenticated user can create their own user document if the userId matches their auth UID.
     * @deny (create) - A user cannot create a user document with a userId that doesn't match their auth UID.
     * @allow (get, update, delete) - An authenticated user can get, update or delete their own user document if the userId matches their auth UID.
     * @deny (get, update, delete) - A user cannot get, update or delete a user document with a userId that doesn't match their auth UID.
     * @principle Enforces user-level access control.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rule for the /users/{userId}/invoices/{invoiceId} collection.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow (create) - An authenticated user can create an invoice under their user ID if the userId in the invoice data matches the path.
     * @deny (create) - A user cannot create an invoice under a different user's ID.
     * @allow (get, list, update, delete) - An authenticated user can get, list, update, or delete their own invoices.
     * @deny (get, list, update, or delete) - A user cannot get, list, update, or delete invoices belonging to other users.
     * @principle Enforces user-level access control for invoices.
     */
    match /users/{userId}/invoices/{invoiceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rule for the /users/{userId}/expenses/{expenseId} collection.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) - An authenticated user can create an expense under their user ID if the userId in the expense data matches the path.
     * @deny (create) - A user cannot create an expense under a different user's ID.
     * @allow (get, list, update, delete) - An authenticated user can get, list, update, or delete their own expenses.
     * @deny (get, list, update, or delete) - A user cannot get, list, update, or delete expenses belonging to other users.
     * @principle Enforces user-level access control for expenses.
     */
    match /users/{userId}/expenses/{expenseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rule for the /users/{userId}/reports/{reportId} collection.
     * @path /users/{userId}/reports/{reportId}
     * @allow (create) - An authenticated user can create a report under their user ID if the userId in the report data matches the path.
     * @deny (create) - A user cannot create a report under a different user's ID.
     * @allow (get, list, update, delete) - An authenticated user can get, list, update, or delete their own reports.
     * @deny (get, list, update, or delete) - A user cannot get, list, update, or delete reports belonging to other users.
     * @principle Enforces user-level access control for reports.
     */
    match /users/{userId}/reports/{reportId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

        /**
     * @description Rule for the /users/{userId}/inventory/{inventoryId} collection.
     * @path /users/{userId}/inventory/{inventoryId}
     * @allow (create) - An authenticated user can create an inventory item under their user ID if the userId in the item data matches the path.
     * @deny (create) - A user cannot create an inventory item under a different user's ID.
     * @allow (get, list, update, delete) - An authenticated user can get, list, update, or delete their own inventory items.
     * @deny (get, list, update, or delete) - A user cannot get, list, update, or delete inventory items belonging to other users.
     * @principle Enforces user-level access control for inventory items.
     */
    match /users/{userId}/inventory/{inventoryId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}